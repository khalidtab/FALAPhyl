catNum = which(colnames(NMDS_table) == category)
colnames(NMDS_table)[catNum] = "Category"
NMDS_table = NMDS_table %>% dplyr::arrange(Category) # This makes sure that the colors are correctly mapped since the legend is in alphabetical order, and it assumes the entries are in alphabetical order too
myCat = as.vector(t(NMDS_table[catNum]))
color = "condition_color"
colorNum = which(colnames(NMDS_table) == color)
myColor = unique(as.vector(t(NMDS_table[colorNum])))
NMDS_table$NMDS1 = as.numeric(as.character(NMDS_table$NMDS1))
NMDS_table$NMDS2 = as.numeric(as.character(NMDS_table$NMDS2))
myplot = ggplot(NMDS_table, aes(x = NMDS1, y = NMDS2)) + geom_point(aes(color = Category, size=1)) +
labs(title = paste("Non-metric Multidimensional Scaling (NMDS), stress = ", stress)) + theme_bw() +
scale_color_manual(values=myColor) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) # these last 3 lines remove the grid lines
myplot
opt = NULL
opt$input = "/Users/khaled/Desktop/per_participant/distance/beta_div/tissue–PhILR.tsv"
dissimilarity = opt$input
opt$group = "condition"
opt$mapping = "/Users/khaled/Desktop/per_participant/tissue.txt"
dissimilarity2 = read_tsv(dissimilarity) %>% suppressMessages(.) %>% as.data.frame(.)
#install.packages("workflow/scripts/vegan_2.5-6.tar", repos = NULL, type="source", INSTALL_opts = '--no-lock')
library("optparse")
suppressMessages(library("vegan"))
suppressMessages(library("dplyr"))
suppressMessages(library("tidyverse"))
suppressMessages(library("ggplot2"))
suppressMessages(library("ggrepel"))
suppressMessages(library("cowplot"))
dissimilarity2 = read_tsv(dissimilarity) %>% suppressMessages(.) %>% as.data.frame(.)
row.names(dissimilarity2) = dissimilarity2[,1]
dissimilarity2[,1] = NULL
PCoA = cmdscale(dissimilarity2,eig=TRUE,k=2) # Only doing 2D graphs
eigenvaluesSUM = PCoA$eig %>% sum(.)
ProportionsExplainedPCoA1 = (PCoA$eig[1]/eigenvaluesSUM) %>% round(.,4)
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1*100
ProportionsExplainedPCoA2 = (PCoA$eig[2]/eigenvaluesSUM) %>% round(.,4)
ProportionsExplainedPCoA2 = ProportionsExplainedPCoA2*100
coordinates = PCoA$points %>% as.data.frame(.)
coordinates = cbind(rownames(coordinates),coordinates)
colnames(coordinates) = c("SampleID","PCoA1","PCoA2")
map = suppressMessages(read.csv(mapping_file, skip=0, header=T, sep="\t"))
mapping_file = opt$mapping
map = suppressMessages(read.csv(mapping_file, skip=0, header=T, sep="\t"))
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
suppressWarnings(suppressMessages(library(effectsize)))
opt = NULL
opt$mapping = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plaque.txt"
opt$input = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/alpha_div/calc_plaque–InvSimpson.txt"
map = suppressMessages(read_tsv(map))
map = opt$mapping
alpha = opt$input
map = suppressMessages(read_tsv(map))
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
map = suppressMessages(read_tsv(map))
map = opt$mapping
alpha = opt$input
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
group = "condition"
map = suppressMessages(read_tsv(map))
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
suppressWarnings(suppressMessages(library(effectsize)))
opt = NULL
opt$mapping = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plaque.txt"
opt$input = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/alpha_div/calc_plaque–InvSimpson.txt"
opt$group = "condition"
map = opt$mapping
alpha = opt$input
group = opt$group
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
opt$patientID = "patient_num"
map = opt$mapping
alpha = opt$input
group = opt$group
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
numOfComparisons
opt$output = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plots"
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
for (x in 1:numOfComparisons){
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .[,1] %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
if (dim(tablesMerged)[1] == 0) { # Meaning, if you merged two categories and you had zero rows because none of the samples matched, exit loop and continue
break
}
#Otherwise, if there are matches, continue
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
effectSize = rank_biserial(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% interpret(., rules = "funder2019")
numOfPatients = length(tablesMerged[,1])
myGraph = ggpubr::ggpaired(tablesMerged, cond1 = category1, cond2 = category2, fill = "condition", palette = "jco", line.size=0.01,
title= (paste("Patient-level comparison of",alphaDivType,"\nBetween",category1,"&",category2)),
subtitle = paste("n =",numOfPatients,".Wilcoxon signed rank sum test, P-value <",formatC(pvalue, format = "e", digits = 5),
"\nRank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)))
ggsave(filename=paste0(output,"/",category1,"_",category2,".svg"),plot=myGraph)
}
x
numOfComparisons
x
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1
category2
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
category1Table
category2Table
currenTable = rbind(category1Table,category2Table)
currenTable
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDrepetitions
?break
patient_num
unique(patientIDrepetitions)
length(unique(patientIDrepetitions))
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
suppressWarnings(suppressMessages(library(effectsize)))
opt = NULL
opt$mapping = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plaque.txt"
opt$input = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/alpha_div/calc_plaque–InvSimpson.txt"
opt$group = "condition"
opt$output = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plot"
opt$patientID = "patient_num"
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
for (x in 1:numOfComparisons){
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
if(length(unique(patientIDrepetitions)) > 1){
error(paste("Your design is not balanced. You have some samples missing that preclude analysis of your subject-level alpha diversity comparison.\n",patientIDrepetitions))
}
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .[,1] %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
if (dim(tablesMerged)[1] == 0) { # Meaning, if you merged two categories and you had zero rows because none of the samples matched, exit loop and continue
break
}
#Otherwise, if there are matches, continue
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
effectSize = rank_biserial(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% interpret(., rules = "funder2019")
numOfPatients = length(tablesMerged[,1])
myGraph = ggpubr::ggpaired(tablesMerged, cond1 = category1, cond2 = category2, fill = "condition", palette = "jco", line.size=0.01,
title= (paste("Patient-level comparison of",alphaDivType,"\nBetween",category1,"&",category2)),
subtitle = paste("n =",numOfPatients,".Wilcoxon signed rank sum test, P-value <",formatC(pvalue, format = "e", digits = 5),
"\nRank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)))
ggsave(filename=paste0(output,"/",category1,"_",category2,".svg"),plot=myGraph)
}
?error
??error
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
suppressWarnings(suppressMessages(library(effectsize)))
option_list = list(
make_option(c("-m", "--mapping"), type="character", default=NULL, help="The mapping file", metavar="Mapping file"),
make_option(c("-i", "--input"), type="character", default=NULL, help="The alpha diversity file", metavar="Alpha diversity file"),
make_option(c("-g", "--group"), type="character", default=NULL, help="The groups column in your mapping file you are comparing", metavar="Groups"),
make_option(c("-p", "--patientID"), type="character", default=NULL, help="Column that has the patient ID", metavar="Patient ID"),
make_option(c("-o", "--output"), type="character", default=NULL, help="Path to output file of plots", metavar="Path to output folder")
);
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
if (is.null(opt$input)){
print_help(opt_parser)
stop("At least one argument must be supplied (input file)", call.=FALSE)
}
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
opt$mapping = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plaque.txt"
opt$input = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/alpha_div/calc_plaque–InvSimpson.txt"
opt$group = "condition"
opt$output = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/per_participant/plot/"
opt$patientID = "patient_num"
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
for (x in 1:numOfComparisons){
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
if(length(unique(patientIDrepetitions)) > 1){
stop(paste("Your design is not balanced. You have some samples missing that preclude analysis of your subject-level alpha diversity comparison.\n",patientIDrepetitions))
}
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .[,1] %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
if (dim(tablesMerged)[1] == 0) { # Meaning, if you merged two categories and you had zero rows because none of the samples matched, exit loop and continue
break
}
#Otherwise, if there are matches, continue
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
effectSize = rank_biserial(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% interpret(., rules = "funder2019")
numOfPatients = length(tablesMerged[,1])
myGraph = ggpubr::ggpaired(tablesMerged, cond1 = category1, cond2 = category2, fill = "condition", palette = "jco", line.size=0.01,
title= (paste("Patient-level comparison of",alphaDivType,"\nBetween",category1,"&",category2)),
subtitle = paste("n =",numOfPatients,".Wilcoxon signed rank sum test, P-value <",formatC(pvalue, format = "e", digits = 5),
"\nRank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)))
ggsave(filename=paste0(output,"/",category1,"_",category2,".svg"),plot=myGraph)
}
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
colnames(map)[1] = "SampleID"
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
for (x in 1:numOfComparisons){
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
if(length(unique(patientIDrepetitions)) > 1){
print(patientIDrepetitions)
stop("Your design is not balanced. You have some samples missing that preclude analysis of your subject-level alpha diversity comparison.")
}
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .[,1] %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
if (dim(tablesMerged)[1] == 0) { # Meaning, if you merged two categories and you had zero rows because none of the samples matched, exit loop and continue
break
}
#Otherwise, if there are matches, continue
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
effectSize = rank_biserial(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% interpret(., rules = "funder2019")
numOfPatients = length(tablesMerged[,1])
myGraph = ggpubr::ggpaired(tablesMerged, cond1 = category1, cond2 = category2, fill = "condition", palette = "jco", line.size=0.01,
title= (paste("Patient-level comparison of",alphaDivType,"\nBetween",category1,"&",category2)),
subtitle = paste("n =",numOfPatients,".Wilcoxon signed rank sum test, P-value <",formatC(pvalue, format = "e", digits = 5),
"\nRank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)))
ggsave(filename=paste0(output,"/",category1,"_",category2,".svg"),plot=myGraph)
}
#install.packages("workflow/scripts/vegan_2.5-6.tar", repos = NULL, type="source", INSTALL_opts = '--no-lock')
library("optparse")
suppressMessages(library("dplyr"))
suppressMessages(library("tidyverse"))
opt = NULL
opt$input = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/tsv/primerAveraged_ChimRem_ASVcondensed_HOMD_modified_genus_species_full.tsv"
opt$mapping = "/Users/khaled/Library/CloudStorage/GoogleDrive-altabtba@ualberta.ca/My Drive/Lab/Anjali - gingivitis21/results/species_genera/primerAveraged_ChimRem_ASVcondensed_HOMD_modified_genus_species.txt"
tsv = opt$input
mapping_file = opt$mapping
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
View(myTSV)
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% as.data.frame(.) %>% unlist(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)] %>% .[-which(rowSums(.) == 0),] # Keep samples that are in the mapping file, then keep features which the sum of the rows is not zero
sampleIDs
sampleIDs = mapping_file[,1] %>% as.data.frame(.) %>% unlist(.)
sampleIDs
sampleIDs[1]
sampleIDs
sampleIDs = mapping_file[,1] %>% as.data.frame(.)
View(sampleIDs)
as.character(sampleIDs)
sampleIDs = mapping_file[,1] %>% as.data.frame(.)
sampleIDs = mapping_file[,1] %>% unlist(.)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)] %>% .[-which(rowSums(.) == 0),] # Keep samples that are in the mapping file, then keep features which the sum of the rows is not zero
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
colnames(myTSV)
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
colnames(myTSV) %in% sampleIDs
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)]
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)]
View(myTSV)
class(myTSV$P10A1)
rowSums(myTSV)
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)] %>% .[-which(rowSums(.) == 0),]
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)]
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)]
myTSV = myTSV %>% .[-which(rowSums(.) == 0),]
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)]
myTSV2 = myTSV %>% .[-which(rowSums(.) == 0),]
rowSums(myTSV) == 0
unique(rowSums(myTSV) == 0)
tsv = opt$input
mapping_file = opt$mapping
output = opt$output
myTSV = read_tsv(tsv, skip = 1) %>% as.data.frame(.)
row.names(myTSV) = myTSV[,1]
myTSV[,1] = NULL
mapping_file = read_tsv(mapping_file)
sampleIDs = mapping_file[,1] %>% unlist(.) %>% as.character(.)
myTSV = myTSV %>% .[,which(colnames(.) %in% sampleIDs)] %>% filter(rowSums(.) != 0)
