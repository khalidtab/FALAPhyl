opt$output
for (currentCategory in myFiles){
myFile = read_tsv(paste0(opt$input,currentCategory))
myResults = dunn.test(myFile$score,myFile$Method,method="bh") %>% as.data.frame(.)
write_tsv(myResults,paste0(opt$input,"Dunns–",currentCategory))
}
suppressMessages(library("dplyr"))
suppressMessages(library("tidyverse"))
suppressMessages(library("ggplot2"))
suppressMessages(library("ggpubr"))
suppressMessages(library("dplyr"))
suppressMessages(library("tidyverse"))
suppressMessages(library("ggplot2"))
suppressMessages(library("ggpubr"))
opt = NULL
opt$input = "data/diff/v35_oral_gs–condition–minAbd0.001minR5minS2/Subgingival_plaque!Supragingival_plaque/AUC_FDR_Power"
library(DAtest)
?DA.tta
library(DAtest)
?powerDA()
?PowerDA()
library(DAtest)
?powerDA
?testDA
?powerDA
?testDA
?powerDA
?testDA
?powerDA
?testDA
library(ggvegan)
install.packages("remotes")
remotes::install_github("gavinsimpson/ggvegan")
library(ggvegan)
suppressMessages(library("tidyverse"))
opt$input = "~/Downloads/snakemake/data/distance/beta_div/Kuwait_project–PhILR.tsv"
opt = NULL
opt$input = "~/Downloads/snakemake/data/distance/beta_div/Kuwait_project–PhILR.tsv"
opt$test = "betadisper"
opt$group = "condition"
opt$group = "group2"
opt$mapping = "~/Downloads/snakemake/data/Kuwait_project.txt"
opt$color = "_color"
dissimilarity = opt$input
mytest = opt$test
output = opt$output
category = opt$group
mapping_file = opt$mapping
color = opt$color
dis = read.table(dissimilarity,sep="\t",head=TRUE,row.names = 1) %>% as.dist(.)
# Prepare the mapping file
map = suppressMessages(read.csv(mapping_file, skip=0, header=T, sep="\t"))
colnames(map)[1] = "SampleID"
map = map[match(colnames(dis %>% as.matrix(.)), map$SampleID),] # Arrange your mapping file to have the same arrangement as your dissimilarity matrix
#Find what category the samples come from
catNum = which(colnames(map) == category)
colNum = which(colnames(map) == paste0(category,color))
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum]),
as.character(map[,colNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition","color")
betadisper_test = vegan::betadisper(dis, working_map$condition, bias.adjust = TRUE) #Bias.adjust for small sample sizes is TRUE
betadisper_perm = betadisper_test %>% permutest(.,permutations=999,pairwise=TRUE)
print("Beta-dispersion Tukey HSD starting…")
pergroup        = betadisper_test %>% TukeyHSD(.,which="group",conf.level = 0.95)
arrangedColors = unique(working_map[ , c("condition", "color")]) %>% arrange(condition) %>% .$color # Get the correct order of colors based on the alphabetical order of the condition
arrangedCateg = unique(working_map[ , c("condition", "color")]) %>% arrange(condition) %>% .$condition # Get the correct order of categories based on the alphabetical order of the condition
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(16,length(arrangedColors)), # type of point
xlab="PCoA1",ylab="PCoA2",
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
myboxplot = boxplot(betadisper_test,
notch=TRUE,outline=TRUE,
col=as.character(arrangedColors),
xlab = paste0(category),
main = "Beta-dispersion distance from centroid",show.names=FALSE)
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(16,length(arrangedColors)), # type of point
xlab="PCoA1",ylab="PCoA2",
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
autoplot(p1)
p1 = plot(betadisper_test,hull=TRUE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(16,length(arrangedColors)), # type of point
xlab="PCoA1",ylab="PCoA2",
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(16,length(arrangedColors)), # type of point
xlab="PCoA1",ylab="PCoA2",
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab="PCoA1",ylab="PCoA2",
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1
PCoA = cmdscale(dist,eig=TRUE,k=2) # Only doing 2D graphs
PCoA = cmdscale(dis,eig=TRUE,k=2) # Only doing 2D graphs
PCoA
eigenvaluesSUM = PCoA$eig %>% sum(.)
ProportionsExplainedPCoA1 = (PCoA$eig[1]/eigenvaluesSUM) %>% round(.,4)
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1*100
ProportionsExplainedPCoA2 = (PCoA$eig[2]/eigenvaluesSUM) %>% round(.,4)
ProportionsExplainedPCoA2 = ProportionsExplainedPCoA2*100
?betadisper_test
betadisper_test
PCoA$eig[1]
eigenvaluesSUM
betadisper_test$eig
sum(betadisper_test$eig)
ProportionsExplainedPCoA1
sum(betadisper_test$eig[1]
class(betadisper_test$eig)
class(betadisper_test$eig)
betadisper_test$eig[1]
betadisper_test$eig[1]/sum(betadisper_test$eig)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100
ProportionsExplainedPCoA1
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %>% round(.,4)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %>% round(.,1)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %$% round(.,4)
library(magrittr)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %$% round(.,4)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %>% round(.,4)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %T% round(.,4)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %>% round(.,4)
(betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %>% round(.,1)
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))*100
ProportionsExplainedPCoA1
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))*100 %>% round(.,4)
ProportionsExplainedPCoA1
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))*100
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1 %>% round(.,4)
ProportionsExplainedPCoA1
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1 %>% round(.,4)
ProportionsExplainedPCoA1
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1 %>% round(.,4) %>% .*100
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1 %>% round(.,4)*100
ProportionsExplainedPCoA1
ProportionsExplainedPCoA1 = (betadisper_test$eig[1]/sum(betadisper_test$eig))
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1 %>% round(.,4)*100
ProportionsExplainedPCoA2 = (betadisper_test$eig[2]/sum(betadisper_test$eig))
ProportionsExplainedPCoA2 = ProportionsExplainedPCoA2 %>% round(.,4)*100
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=5,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=10,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median and beta-dispersion standard deviation ellipses"))
p1
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),
ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median\n and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1
p1
?plot
plot.betadisper
?plot.betadisper
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),
ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median\n and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5,add="method 1")
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),
ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median\n and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
?plot.betadisper
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),
ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with spatial median\n and beta-dispersion standard deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5,
type = c("median"))
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),
ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with lines connecting to the spatial median\n and beta-dispersion standard-deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5,
type = c("median"))
p1 = plot(betadisper_test,hull=FALSE,label=FALSE,col=as.character(arrangedColors),
ellipse=TRUE,lty="solid",lwd=5,
segments=TRUE,seg.col="grey",seg.lty=1,seg.lwd=0.3,
pch=rep(1,length(arrangedColors)), # type of point
xlab=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),
ylab=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"),
main=paste("PCoA with lines connecting to the spatial median\n and beta-dispersion standard-deviation ellipses"))
legend("topright", legend = myboxplot$names, border="black", fill = as.character(arrangedColors),cex=0.5)
p1
suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(dunn.test)))
suppressWarnings(suppressMessages(library(magrittr)))
opt = NULL
opt$input = "~/Downloads/snakemake/diff/Kuwait_project–group2–minAbd0.001minR5minS2/Control!mild_moderate–AUC_FDR_Power.txt"
myFile = read_tsv(opt$input)
myResults = dunn.test(myFile$score,myFile$Method,method="bh") %>% as.data.frame(.)
View(myFile)
myResults = dunn.test(myFile$score,myFile$Method,method="bh")
dunn.test(myFile$score,myFile$Method,method="bh")
class(myFile$score)
myResults = dunn.test(myFile$score,myFile$Method,method="bh")
myResults = dunn.test(myFile$score,myFile$Method,method="bh")
View(myFile)
library("DAtest")
library("tidyverse")
opt = NULL
opt$input = "~/Downloads/snakemake/tmp/diff/niche_LAP_GCF–longshort–minAbd0.001minR5minS2/pairwise/long!short.tsv"
df = opt$input
df = read_tsv(df)
dfRows = as.data.frame(df[,1])
df = as.data.frame(df)
rownames(df) = dfRows[,1]
df[,1] = NULL
df[] = lapply(df, as.numeric)
df = t(df)
if ( as.numeric(opt$minsample)==0 && as.numeric(opt$minread)==0 && as.numeric(opt$minabund)==0){df = df}else{
df = preDA(df, min.samples = as.numeric(opt$minsample), min.reads = as.numeric(opt$minread), min.abundance =  as.numeric(opt$minabund))
}
opt$mapping = "~/Downloads/snakemake/tmp/diff/niche_LAP_GCF–longshort–minAbd0.001minR5minS2/pairwise/long!short.txt"
map = opt$mapping
map = read.csv(map,sep="\t") %>% as.data.frame(.)
opt$category = "longshort"
opt$pair = "subject_ID"
catNum = which(colnames(map) == category)
subjectNum = which(colnames(map) == subjectID)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum]),
as.character(map[,subjectNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition","subject")
vec = working_map$condition %>% as.factor(.)
subject = working_map$subject %>% as.factor(.)
category = opt$category
subjectID = opt$pair
catNum = which(colnames(map) == category)
subjectNum = which(colnames(map) == subjectID)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum]),
as.character(map[,subjectNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition","subject")
vec = working_map$condition %>% as.factor(.)
subject = working_map$subject %>% as.factor(.)
opt$test = "fri"
final=DA.fri(df, paired=subject, predictor = vec)
suppressMessages(library("vegan"))
suppressMessages(library("dplyr"))
suppressMessages(library("tidyverse"))
suppressMessages(library("ggplot2"))
suppressMessages(library("ggrepel"))
suppressMessages(library("cowplot"))
opt = NULL
opt$input = "~/Downloads/snakemake/data/distance/beta_div/Kuwait_project–PhILR.tsv"
opt$output = "~/Downloads/snakemake/data/plots/philr.svg"
opt$mapping = "~/Downloads/snakemake/data/Kuwait_project.txt"
opt$group = "group2"
opt$color = "group2_color"
dissimilarity = opt$input
output = opt$output
category = opt$group
mapping_file = opt$mapping
color = opt$color
opt$width = 10
opt$height = 5
mywidth = as.numeric(opt$width)
myheight = as.numeric(opt$height)
dissimilarity2 = read_tsv(dissimilarity) %>% suppressMessages(.) %>% as.data.frame(.)
row.names(dissimilarity2) = dissimilarity2[,1]
dissimilarity2[,1] = NULL
PCoA = cmdscale(dissimilarity2,eig=TRUE,k=2) # Only doing 2D graphs
eigenvaluesSUM = PCoA$eig %>% sum(.)
ProportionsExplainedPCoA1 = (PCoA$eig[1]/eigenvaluesSUM) %>% round(.,4)
ProportionsExplainedPCoA1 = ProportionsExplainedPCoA1*100
ProportionsExplainedPCoA2 = (PCoA$eig[2]/eigenvaluesSUM) %>% round(.,4)
ProportionsExplainedPCoA2 = ProportionsExplainedPCoA2*100
coordinates = PCoA$points %>% as.data.frame(.)
coordinates = cbind(rownames(coordinates),coordinates)
colnames(coordinates) = c("SampleID","PCoA1","PCoA2")
map = suppressMessages(read.csv(mapping_file, skip=0, header=T, sep="\t"))
PCoA_table=merge(coordinates,map, by.x = "SampleID", by.y = "X.SampleID")
catNum = which(colnames(PCoA_table) == category)
colnames(PCoA_table)[catNum] = "Category"
PCoA_table = PCoA_table %>% dplyr::arrange(Category) # This makes sure that the colors are correctly mapped since the legend is in alphabetical order, and it assumes the entries are in alphabetical order too
myCat = as.vector(t(PCoA_table[catNum]))
colorNum = which(colnames(PCoA_table) == color)
myColor = unique(as.vector(t(PCoA_table[colorNum])))
PCoA_table$PCoA1 = as.numeric(as.character(PCoA_table$PCoA1))
PCoA_table$PCoA2 = as.numeric(as.character(PCoA_table$PCoA2))
myplot = ggplot(PCoA_table, aes(x = PCoA1, y = PCoA2)) + geom_point(aes(color = Category, size=1)) +
labs(title = "Principal coordinates analysis") + theme_bw() +
scale_color_manual(values=myColor) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())  # these last 3 lines remove the grid lines
myplot = myplot + labs(x=paste0("PCoA1 - variance explained: ",ProportionsExplainedPCoA1,"%"),y=paste0("PCoA2 - variance explained: ",ProportionsExplainedPCoA2,"%"))
myplot
category
View(PCoA_table)
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(require(vegan)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(phyloseq)))
suppressWarnings(suppressMessages(library(ape)))
?transform_sample_counts
suppressWarnings(suppressMessages(library(optparse)))
suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(dunn.test)))
suppressWarnings(suppressMessages(library(magrittr)))
load_and_fix_Dis = function(myInput){
myDis = read.csv(myInput,comment="",sep = "\t",row.names = 1)
myDis[lower.tri(myDis)] = NA
myDis[,1] = row.names(myDis)
colnames(myDis)[1] = "X"
myDis = suppressMessages(reshape2::melt(myDis,na.rm = TRUE))
colnames(myDis) = c("SampleID","variable","value")
myDis = myDis[!(myDis$SampleID == myDis$variable),] # Delete distances from self
myDis = left_join(myDis,mymap,by="SampleID")
colnames(myDis) = c("SampleID1","SampleID","value1","condition1")
myDis = left_join(myDis,mymap,by="SampleID")
colnames(myDis) = c("SampleID1","SampleID2","value1","condition1","condition2")
myDis = cbind(myDis$condition1,myDis$condition2,myDis$value1)
colnames(myDis) = c("condition1","condition2","value")
myDis = as.data.frame(myDis)
TorF = myDis$condition1 > myDis$condition2 # Make sure that category 1 and 2 are always in the right order so that we don't, for example, have an issue where the same 2 categories just switched placed in the two columns
myDis = cbind(myDis,TorF)
myDisTRUE = subset(myDis,TorF == "TRUE")
myDisFALSE = subset(myDis,TorF == "FALSE")
myDisFALSE = myDisFALSE %$% data_frame(condition2,condition1,value,TorF)
colnames(myDisFALSE) = c("condition1","condition2","value","TorF")
myDis = rbind(myDisFALSE,myDisTRUE)
myDis = cbind(myDis,paste0(myDis$condition1,"+",myDis$condition2))
colnames(myDis) = c("condition1","condition2","value","TorF","comparison")
myDis = myDis %$% data.frame(comparison,value)
return(myDis)
}
GiveMeDunn = function(myDis){
myDunn = dunn.test(myDis$value %>% as.numeric(.),
myDis$comparison,
method="bh",kw=FALSE,table=FALSE,list=FALSE) %$% data.frame(comparisons,Z,P,P.adjusted)
myDunn[c('Category 1', 'Category 2')] = str_split_fixed(myDunn$comparison, ' - ', 2)
DistanceInCategory1BiggerThanCategory2 = (myDunn$Z > 0)
myDunn = cbind(myDunn,DistanceInCategory1BiggerThanCategory2)
myDunn = myDunn %$% data.frame(`Category 1`,`Category 2`,Z,P,P.adjusted,DistanceInCategory1BiggerThanCategory2)
return(myDunn)
}
opt = NULL
opt$mapping = "~/Downloads/snakemake/data/v35_oral_gs.txt"
mymap = suppressMessages(read.csv(opt$mapping, skip=0, header=T, sep="\t"))
colnames(mymap)[1] = "SampleID"
opt$category = "condition"
catNum = which(colnames(mymap) == opt$category)
mymap = cbind(mymap[,1],mymap[,catNum]) %>% as.data.frame(.)
colnames(mymap) = c("SampleID","condition")
myDis = load_and_fix_Dis(opt$input) # Load dissimilarity matrix, "melt" it, and make sure that category 1 and category 2 do not switch places
myStats = myDis%>% group_by(comparison)%>% summarise(Median=median(as.numeric(value)), Max=max(as.numeric(value)), Min=min(as.numeric(value)), IQR=IQR(as.numeric(value)))
opt
opt$input = "~/Downloads/snakemake/data/distance/beta_div/v35_oral_gs–PhILR.tsv"
mymap = suppressMessages(read.csv(opt$mapping, skip=0, header=T, sep="\t"))
colnames(mymap)[1] = "SampleID"
catNum = which(colnames(mymap) == opt$category)
mymap = cbind(mymap[,1],mymap[,catNum]) %>% as.data.frame(.)
colnames(mymap) = c("SampleID","condition")
myDis = load_and_fix_Dis(opt$input) # Load dissimilarity matrix, "melt" it, and make sure that category 1 and category 2 do not switch places
myStats = myDis%>% group_by(comparison)%>% summarise(Median=median(as.numeric(value)), Max=max(as.numeric(value)), Min=min(as.numeric(value)), IQR=IQR(as.numeric(value)))
myKruskall =  myDis %$% kruskal.test(value,comparison)
View(myDis)
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
suppressWarnings(suppressMessages(library(effectsize)))
install.packages("effectsize")
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
suppressWarnings(suppressMessages(library(effectsize)))
opt = NULL
opt$mapping = "~/Downloads/snakemake/data/v35_oral_gs.txt"
opt$input = "~/Downloads/snakemake/data/alpha_div/calc_v35_oral_gs–Shannon.txt"
opt$group = "condition"
opt$patientID = "subjectID"
map = opt$mapping
alpha = opt$input
group = opt$group
output = opt$output
patientID = opt$patientID
map = suppressMessages(read_tsv(map))
alpha = suppressMessages(read_tsv(alpha))
alphaDivType = colnames(alpha)[2]
# Merge then keep only the pertinent columns
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
numOfComparisons
for (x in 1:numOfComparisons){
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1 %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
if (dim(tablesMerged)[1] == 0) { # Meaning, if you merged two categories and you had zero rows because none of the samples matched, exit loop and continue
break
}
#Otherwise, if there are matches, continue
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
effectSize = rank_biserial(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% interpret(., rules = "funder2019")
numOfPatients = length(tablesMerged[,1])
myGraph = ggpubr::ggpaired(tablesMerged, cond1 = category1, cond2 = category2, fill = "condition", palette = "jco", line.size=0.01,
title= (paste("Patient-level comparison of",alphaDivType,"\nBetween",category1,"&",category2)),
subtitle = paste("n =",numOfPatients,"\nWilcoxon signed rank sum test, P-value <",formatC(pvalue, format = "e", digits = 5)),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2))
ggsave(filename=paste0(output,"/",category1,"_",category2,".svg"),plot=myGraph)
}
x = numOfComparisons[1]
x
x = 1
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1 %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1 %>% as.matrix(.)
View(currenTable)
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDrepetitions
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1 %>% as.matrix(.)
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2)
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2)
View(patientIDtwos)
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .[,1] %>% as.matrix(.)
patientIDtwos
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
