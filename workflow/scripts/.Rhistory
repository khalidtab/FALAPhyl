distance = merge(distance,sampleIDtable, by.x=c("v2"), by.y=c("v2"))
# Subset to only those from the same patient
distance = distance[distance$v1subjectID==distance$v2subjectID, ]
colnames(distance) = c("v2","v1",dist_type,"repl","noRepl","cond1","cond2","v1subjectID","v2subjectID")
uniqueCond = c(distance$cond1, distance$cond2) %>% unique(.)
comboUniq = combn(uniqueCond,2,simplify = FALSE)
for (myConds in comboUniq) {
myCond1 = myConds[1]
myCond2 = myConds[2]
table1 = subset(distance,cond1 == myCond1)
table1 = data.frame(table1$v1,table1$v2,table1[,3],table1$repl,table1$noRepl,table1$cond1,table1$cond2) # Rearrange the columns
colnames(table1) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names of the columns
table2 = subset(distance,cond2 == myCond1)
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond2","cond1") # This makes table2 to have the same format as table1
table2 = data.frame(table2$v1,table2$v2,table2[,3],table2$repl,table2$noRepl,table2$cond1,table2$cond2) # Rearrange the columns
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names
myTable = rbind(table1,table2)
# By now myTable cond1 equals myCond1. Next, subset mytable so that cond2 equals myCond2
myTable = subset(myTable,cond2 == myCond2)
i = c(3,4,5)
myTable[,i] = apply(myTable[,i],2, function(x) as.numeric(as.character(x)))
rm(table1,table2)
effectSize = rank_biserial(myTable$repl,myTable$noRepl, paired = TRUE) %>% interpret(., rules = "funder2019")
pvalue = wilcox.test(myTable$repl,myTable$noRepl, paired = TRUE) %>% .$p.value
pd = data.frame(replacement = myTable$repl, noreplacement = myTable$noRepl)
numOfParticipants = dim(pd)[1]
if (dist_type == "bray"){
colnames(pd) = c("balanced variation in abundance","abundance gradients")
myGraph = ggpubr::ggpaired(pd, cond1 = "balanced variation in abundance", cond2 = "abundance gradients", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown \n",myCond1,"and",myCond2, "\n Pvalue <",formatC(pvalue, format = "e", digits = 2))),
subtitle = paste0("n =",numOfParticipants,
". Wilcoxon signed rank sum test, P-value < ", formatC(pvalue, format = "e", digits = 5)),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)
)} else {
colnames(pd) = c("Turn-over","Nestedness")
myGraph = ggpubr::ggpaired(pd, cond1 = "Turn-over", cond2 = "Nestedness", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown\n",myCond1,"and",myCond2)),
subtitle = paste0("n =",numOfParticipants,
"\nWilcoxon signed rank sum test, P-value < ",formatC(pvalue, format = "e", digits = 5),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2))
)}
ggsave(filename=paste0(output,"/",myCond1,"_",myCond2,".svg"),plot=myGraph)
}
comboUniq
uniqueCond = c(distance$cond1, distance$cond2) %>% unique(.)
uniqueCond
View(distance)
dist_type
dist_type = opt$distance
dist_type
opt$distance = "jaccard"
colnames(distance) = c("v2","v1",dist_type,"repl","noRepl","cond1","cond2","v1subjectID","v2subjectID")
dist_type
dist_type = opt$distance
dist_type
colnames(distance) = c("v2","v1",dist_type,"repl","noRepl","cond1","cond2","v1subjectID","v2subjectID")
uniqueCond = c(distance$cond1, distance$cond2) %>% unique(.)
comboUniq = combn(uniqueCond,2,simplify = FALSE)
for (myConds in comboUniq) {
myCond1 = myConds[1]
myCond2 = myConds[2]
table1 = subset(distance,cond1 == myCond1)
table1 = data.frame(table1$v1,table1$v2,table1[,3],table1$repl,table1$noRepl,table1$cond1,table1$cond2) # Rearrange the columns
colnames(table1) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names of the columns
table2 = subset(distance,cond2 == myCond1)
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond2","cond1") # This makes table2 to have the same format as table1
table2 = data.frame(table2$v1,table2$v2,table2[,3],table2$repl,table2$noRepl,table2$cond1,table2$cond2) # Rearrange the columns
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names
myTable = rbind(table1,table2)
# By now myTable cond1 equals myCond1. Next, subset mytable so that cond2 equals myCond2
myTable = subset(myTable,cond2 == myCond2)
i = c(3,4,5)
myTable[,i] = apply(myTable[,i],2, function(x) as.numeric(as.character(x)))
rm(table1,table2)
effectSize = rank_biserial(myTable$repl,myTable$noRepl, paired = TRUE) %>% interpret(., rules = "funder2019")
pvalue = wilcox.test(myTable$repl,myTable$noRepl, paired = TRUE) %>% .$p.value
pd = data.frame(replacement = myTable$repl, noreplacement = myTable$noRepl)
numOfParticipants = dim(pd)[1]
if (dist_type == "bray"){
colnames(pd) = c("balanced variation in abundance","abundance gradients")
myGraph = ggpubr::ggpaired(pd, cond1 = "balanced variation in abundance", cond2 = "abundance gradients", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown \n",myCond1,"and",myCond2, "\n Pvalue <",formatC(pvalue, format = "e", digits = 2))),
subtitle = paste0("n =",numOfParticipants,
". Wilcoxon signed rank sum test, P-value < ", formatC(pvalue, format = "e", digits = 5)),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)
)} else {
colnames(pd) = c("Turn-over","Nestedness")
myGraph = ggpubr::ggpaired(pd, cond1 = "Turn-over", cond2 = "Nestedness", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown\n",myCond1,"and",myCond2)),
subtitle = paste0("n =",numOfParticipants,
"\nWilcoxon signed rank sum test, P-value < ",formatC(pvalue, format = "e", digits = 5),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2))
)}
ggsave(filename=paste0(output,"/",myCond1,"_",myCond2,".svg"),plot=myGraph)
}
comboUniq
for (myConds in comboUniq) {
myCond1 = myConds[1]
myCond2 = myConds[2]
table1 = subset(distance,cond1 == myCond1)
table1 = data.frame(table1$v1,table1$v2,table1[,3],table1$repl,table1$noRepl,table1$cond1,table1$cond2) # Rearrange the columns
colnames(table1) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names of the columns
table2 = subset(distance,cond2 == myCond1)
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond2","cond1") # This makes table2 to have the same format as table1
table2 = data.frame(table2$v1,table2$v2,table2[,3],table2$repl,table2$noRepl,table2$cond1,table2$cond2) # Rearrange the columns
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names
myTable = rbind(table1,table2)
# By now myTable cond1 equals myCond1. Next, subset mytable so that cond2 equals myCond2
myTable = subset(myTable,cond2 == myCond2)
i = c(3,4,5)
myTable[,i] = apply(myTable[,i],2, function(x) as.numeric(as.character(x)))
rm(table1,table2)
effectSize = rank_biserial(myTable$repl,myTable$noRepl, paired = TRUE) %>% interpret(., rules = "funder2019")
pvalue = wilcox.test(myTable$repl,myTable$noRepl, paired = TRUE) %>% .$p.value
pd = data.frame(replacement = myTable$repl, noreplacement = myTable$noRepl)
numOfParticipants = dim(pd)[1]
if (dist_type == "bray"){
colnames(pd) = c("balanced variation in abundance","abundance gradients")
myGraph = ggpubr::ggpaired(pd, cond1 = "balanced variation in abundance", cond2 = "abundance gradients", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown \n",myCond1,"and",myCond2, "\n Pvalue <",formatC(pvalue, format = "e", digits = 2))),
subtitle = paste0("n =",numOfParticipants,
". Wilcoxon signed rank sum test, P-value < ", formatC(pvalue, format = "e", digits = 5)),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)
)} else {
colnames(pd) = c("Turn-over","Nestedness")
myGraph = ggpubr::ggpaired(pd, cond1 = "Turn-over", cond2 = "Nestedness", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown\n",myCond1,"and",myCond2)),
subtitle = paste0("n =",numOfParticipants,
"\nWilcoxon signed rank sum test, P-value < ",formatC(pvalue, format = "e", digits = 5),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2))
)}
ggsave(filename=paste0(output,"/",myCond1,"_",myCond2,".svg"),plot=myGraph)
}
?wilcox.test()
for (myConds in comboUniq) {
myCond1 = myConds[1]
myCond2 = myConds[2]
table1 = subset(distance,cond1 == myCond1)
table1 = data.frame(table1$v1,table1$v2,table1[,3],table1$repl,table1$noRepl,table1$cond1,table1$cond2) # Rearrange the columns
colnames(table1) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names of the columns
table2 = subset(distance,cond2 == myCond1)
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond2","cond1") # This makes table2 to have the same format as table1
table2 = data.frame(table2$v1,table2$v2,table2[,3],table2$repl,table2$noRepl,table2$cond1,table2$cond2) # Rearrange the columns
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names
myTable = rbind(table1,table2)
# By now myTable cond1 equals myCond1. Next, subset mytable so that cond2 equals myCond2
myTable = subset(myTable,cond2 == myCond2)
i = c(3,4,5)
myTable[,i] = apply(myTable[,i],2, function(x) as.numeric(as.character(x)))
rm(table1,table2)
effectSize = rank_biserial(myTable$repl,myTable$noRepl, paired = TRUE) %>% interpret(., rules = "funder2019")
pvalue = wilcox.test(myTable$repl,myTable$noRepl, paired = TRUE, exact = FALSE) %>% .$p.value
pd = data.frame(replacement = myTable$repl, noreplacement = myTable$noRepl)
numOfParticipants = dim(pd)[1]
if (dist_type == "bray"){
colnames(pd) = c("balanced variation in abundance","abundance gradients")
myGraph = ggpubr::ggpaired(pd, cond1 = "balanced variation in abundance", cond2 = "abundance gradients", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown \n",myCond1,"and",myCond2, "\n Pvalue <",formatC(pvalue, format = "e", digits = 2))),
subtitle = paste0("n =",numOfParticipants,
". Wilcoxon signed rank sum test, P-value < ", formatC(pvalue, format = "e", digits = 5)),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2)
)} else {
colnames(pd) = c("Turn-over","Nestedness")
myGraph = ggpubr::ggpaired(pd, cond1 = "Turn-over", cond2 = "Nestedness", fill = "condition", palette = "jco", line.size=0.01,
title= (paste(dist_type, "breakdown\n",myCond1,"and",myCond2)),
subtitle = paste0("n =",numOfParticipants,
"\nWilcoxon signed rank sum test, P-value < ",formatC(pvalue, format = "e", digits = 5),
". Rank biserial effect size= ",formatC(effectSize$r_rank_biserial, format = "g", digits = 2))
)}
ggsave(filename=paste0(output,"/",myCond1,"_",myCond2,".svg"),plot=myGraph)
}
?rank_biserial
library("DAtest")
library("tidyverse")
?testDA
library("DAtest")
?testDA()
library("DAtest")
?testDA()
library("DAtest")
?testDA
?write.csv
library("DAtest")
?DA.lic
?plot
library(DAtest)
>DA.tta
?DA.tta
library("DAtest")
library("tidyverse")
opt = NULL
opt$input = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/diff/pairwise–whitespots–Disease–abc/Disease–wsl+control.tsv"
opt$mapping = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/diff/pairwise–whitespots–Disease–abc/Disease–wsl+control.txt"
df = opt$input
df = read_tsv(df)
dfRows = as.data.frame(df[,1])
df = as.data.frame(df)
rownames(df) = dfRows[,1]
df[,1] = NULL
df[] = lapply(df, as.numeric)
df = t(df)
# Load mapping file
map = opt$mapping
map = read.csv(map,sep="\t") %>% as.data.frame(.)
catergory = "condition"
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
category = "condtion"
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
category
category = "condition"
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
vec
category
View(map)
category = "Disease"
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
final=DA.abc(df, predictor = vec)
final=DA.tta(df, predictor = vec)
final
View(summary.DA(final))
library(DAtest)
View(summary(final))
View(summary(final,sort("AUC")))
final$Method
final = testDA(df, predictor = vec)
class(final)
summary(final)
?summary.DA
final2=DA.lia(df, predictor = vec)
final2=DA.tta(df, predictor = vec)
View(final2)
final
library(tidyverse)
?write_tsv()
library("DAtest")
allDA
?allDA
opt = NULL
opt$input = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/diff/pairwise–whitespots–Disease–abc/Disease–wsl+control.tsv"
opt$mapping = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/diff/pairwise–whitespots–Disease–abc/Disease–wsl+control.txt"
df = opt$input
df = read_tsv(df)
dfRows = as.data.frame(df[,1])
df = as.data.frame(df)
rownames(df) = dfRows[,1]
df[,1] = NULL
df[] = lapply(df, as.numeric)
df = t(df)
# Load mapping file
map = opt$mapping
map = read.csv(map,sep="\t") %>% as.data.frame(.)
library("DAtest")
library("tidyverse")
# Load the biom tsv file
df = opt$input
df = read_tsv(df)
dfRows = as.data.frame(df[,1])
df = as.data.frame(df)
rownames(df) = dfRows[,1]
df[,1] = NULL
df[] = lapply(df, as.numeric)
df = t(df)
# Load mapping file
map = opt$mapping
map = read.csv(map,sep="\t") %>% as.data.frame(.)
category = "Disease"
category = opt$category
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
View(map)
category$category = "Disease"
category = opt$category
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
View(map)
category
opt$category
opt$category = "Disease"
category = opt$category
catNum = which(colnames(map) == category)
working_map = cbind(as.character(map[,1]),
as.character(map[,catNum])) %>% as.data.frame(.)
colnames(working_map) = c("SampleID","condition")
vec = working_map$condition %>% as.factor(.)
vec
testa = allDA(df, predictor = vec, cores = 1, tests="ttr")
testa
summary(testa)
testa = allDA(df, predictor = vec, cores = 1, tests=c("ttr","aov"))
testa = testDA(df, predictor = vec, cores = 1, tests=c("ttr"))
testa
test = testDA(df, predictor = vec, cores = 1)
test = testDA(df, predictor = vec, cores = 1, tests="aov")
test = testDA(df, predictor = vec, cores = 1, tests=c("aov"))
test = testDA(df, predictor = vec, tests=c("aov"))
test = testDA(df, predictor = vec, tests="aov")
test = testDA(df, predictor = vec, tests=c("aov","ttc"))
test
summary(test)
summary(test)
View(summary(test))
test = testDA(df, predictor = vec, tests=c("aov","aov"))
test = testDA(df, predictor = vec, tests=c("aov","ttc"))
test
test = testDA(df, predictor = vec, tests=c("ttc","aov"))
test
View(test)
test$table
test = testDA(df, predictor = vec, tests=c("ttc","kru"))
test
test = testDA(df, predictor = vec, tests=c("kru"))
test = testDA(df, predictor = vec, tests=c("kru","ttr"))
test
test = testDA(df, predictor = vec, tests=c("kru","aov"))
test = testDA(df, predictor = vec, tests=c("kru","lov"))
test = testDA(df, predictor = vec, tests=c("kru","ttc"))
test
test = testDA(df, predictor = vec, tests=c("ltt2","ttc"))
summary(test)
plot(test, p = TRUE)
plot(test)
test
test = testDA(df, predictor = vec, tests=c("kru","ttc"))
test
plot(test)
final=testDA(df, predictor = vec,tests=c("kru","poi"))
plot(final)
summary(test)
test
?dplyr::arrange
opt = NULL
opt$input = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/tsv/v35_oral_gs.tsv"
opt$mapping = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/v35_oral_gs.txt"
opt$groups = "condition"
condition = opt$groups
load_phylo = function(myPhyloseqObject){
# Load and format tables
myBiomTSV = myPhyloseqObject@otu_table@.Data
featureNames = row.names(myBiomTSV) %>% as.matrix()
myBiomTSV = as.data.frame(myBiomTSV)
row.names(myBiomTSV) = featureNames
myBiomTSV = myBiomTSV[-c(1)] %>% t(.) %>% as.data.frame(.)
return(myBiomTSV)
}
biom = suppressMessages(readr::read_tsv(biomFile,skip=1)) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
biom = otu_table(biom, taxa_are_rows = TRUE)
# Now do the required calculations on each group at a time
## First, find what the groups are
mapping = import_qiime_sample_data(mappingFile)
condNum = which(colnames(mapping)==condition)
condName = mapping[,condNum][[1]] %>% unique(.) %>% as.character(.)
myPhylo = merge_phyloseq(biom,mapping)
myCondPop = c()
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(require(vegan)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(phyloseq)))
biom = suppressMessages(readr::read_tsv(biomFile,skip=1)) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
biom = otu_table(biom, taxa_are_rows = TRUE)
# Now do the required calculations on each group at a time
## First, find what the groups are
mapping = import_qiime_sample_data(mappingFile)
condNum = which(colnames(mapping)==condition)
condName = mapping[,condNum][[1]] %>% unique(.) %>% as.character(.)
myPhylo = merge_phyloseq(biom,mapping)
myCondPop = c()
biomFile = opt$input
mappingFile = opt$mapping
condition = opt$groups
output = opt$output
biom = suppressMessages(readr::read_tsv(biomFile,skip=1)) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
biom = otu_table(biom, taxa_are_rows = TRUE)
# Now do the required calculations on each group at a time
## First, find what the groups are
mapping = import_qiime_sample_data(mappingFile)
condNum = which(colnames(mapping)==condition)
condName = mapping[,condNum][[1]] %>% unique(.) %>% as.character(.)
myPhylo = merge_phyloseq(biom,mapping)
myCondPop = c()
condName
opt = NULL
opt$input = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/tsv/v35_oral_gs.tsv"
opt$mapping = "/Volumes/GoogleDrive/My Drive/Lab/Annies_project/v35_oral_gs.txt"
opt$groups = "condition"
biomFile = opt$input
mappingFile = opt$mapping
condition = opt$groups
####### Functions #######
load_phylo = function(myPhyloseqObject){
# Load and format tables
myBiomTSV = myPhyloseqObject@otu_table@.Data
featureNames = row.names(myBiomTSV) %>% as.matrix()
myBiomTSV = as.data.frame(myBiomTSV)
row.names(myBiomTSV) = featureNames
myBiomTSV = myBiomTSV %>% t(.) %>% as.data.frame(.)
return(myBiomTSV)
}
#########################
biom = suppressMessages(readr::read_tsv(biomFile,skip=1)) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
biom = otu_table(biom, taxa_are_rows = TRUE)
# Now do the required calculations on each group at a time
## First, find what the groups are
mapping = import_qiime_sample_data(mappingFile)
condNum = which(colnames(mapping)==condition)
condName = mapping[,condNum][[1]] %>% unique(.) %>% as.character(.) %>% combn(.,2,simplify=FALSE)
myPhylo = merge_phyloseq(biom,mapping)
myCondPop = c()
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(phyloseq)))
biom = suppressMessages(readr::read_tsv(biomFile,skip=1)) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
biom = otu_table(biom, taxa_are_rows = TRUE)
# Now do the required calculations on each group at a time
## First, find what the groups are
mapping = import_qiime_sample_data(mappingFile)
condNum = which(colnames(mapping)==condition)
condName = mapping[,condNum][[1]] %>% unique(.) %>% as.character(.) %>% combn(.,2,simplify=FALSE)
myPhylo = merge_phyloseq(biom,mapping)
myCondPop = c()
condName
myCond = condName[1]
myCond
subsetPhylo = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[1])
subsetPhylo2 = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[2])
subsetTable = suppressWarnings(suppressMessages(load_phylo(subsetPhylo)))
subsetTable2 = suppressWarnings(suppressMessages(load_phylo(subsetPhylo2)))
subsetMeta  = sample_data(subsetPhylo)  %>% as.matrix(.) %>% as.data.frame(.)
subsetMeta2 = sample_data(subsetPhylo2) %>% as.matrix(.) %>% as.data.frame(.)
combinedBiom = bind_rows(subsetTable, subsetTable2)
combinedmeta = bind_rows(subsetMeta,subsetMeta2)
subsetPhylo = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[1])
myCond
myCond = myCond[[1]]
subsetPhylo = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[1])
subsetPhylo2 = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[2])
subsetTable = suppressWarnings(suppressMessages(load_phylo(subsetPhylo)))
subsetTable2 = suppressWarnings(suppressMessages(load_phylo(subsetPhylo2)))
subsetMeta  = sample_data(subsetPhylo)  %>% as.matrix(.) %>% as.data.frame(.)
subsetMeta2 = sample_data(subsetPhylo2) %>% as.matrix(.) %>% as.data.frame(.)
combinedBiom = bind_rows(subsetTable, subsetTable2)
combinedmeta = bind_rows(subsetMeta,subsetMeta2)
combinedmeta
View(combinedBiom)
biomNames = rownames(combinedBiom)
biomNames = rownames(combinedBiom) $>$ as.data.frame(.)
biomNames = rownames(combinedBiom) %>% as.data.frame(.)
View(biomNames)
View(combinedmeta)
?left_join()
biomNames = rownames(combinedBiom) %>% as.data.frame(.) %>% left_join(.,combinedmeta)
colnames(biomNames) = "X.SampleID"
mytest = left_join(biomNames,combinedmeta)
mytest = left_join(biomNames,combinedmeta,by="X.SampleID")
View(mytest)
biomNames = rownames(combinedBiom) %>% as.data.frame(.)
colnames(biomNames) = "X.SampleID"
rearrangedMeta = left_join(biomNames,combinedmeta,by="X.SampleID")
View(rearrangedMeta)
output = "~/Downloads/"
for (myCond in condName) {
subsetPhylo = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[1])
subsetPhylo2 = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond[2])
subsetTable = suppressWarnings(suppressMessages(load_phylo(subsetPhylo)))
subsetTable2 = suppressWarnings(suppressMessages(load_phylo(subsetPhylo2)))
subsetMeta  = sample_data(subsetPhylo)  %>% as.matrix(.) %>% as.data.frame(.)
subsetMeta2 = sample_data(subsetPhylo2) %>% as.matrix(.) %>% as.data.frame(.)
combinedBiom = bind_rows(subsetTable, subsetTable2)
combinedmeta = bind_rows(subsetMeta,subsetMeta2)
#Rearrange combinedmeta based on the columns in the combinedBiom in case they are not in the same arrangement
#Done by getting the names from the biom file, then left joining the combinedmeta file to it
biomNames = rownames(combinedBiom) %>% as.data.frame(.)
colnames(biomNames) = "X.SampleID"
rearrangedMeta = left_join(biomNames,combinedmeta,by="X.SampleID")
write.table(combinedBiom,file=paste0(output,"/",condition,"–",myCond[1],"+",myCond[2],".tsv"),
quote = FALSE, sep = "\t",col.names = NA)
write.table(rearrangedMeta,file=paste0(output,"/",condition,"–",myCond[1],"+",myCond[2],".txt"),
quote = FALSE, sep = "\t", row.names = FALSE)
}
library("DAtest")
?preDA
