panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) # these last 3 lines remove the grid lines
myplot
myplot = ggplot(NMDS_table, aes(x = NMDS1, y = NMDS2)) + geom_point(aes(color = Category, size=1), position="jitter") +
labs(title = paste("NMDS stress = ", stress)) + theme_bw() +
scale_color_manual(values=myColor) +
geom_text_repel(max.overlaps = 50, label=NMDS_table$SampleID,size=0) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) # these last 3 lines remove the grid lines
ggsave(filename=output,plot=myplot)
# Graph with names
myplot = ggplot(NMDS_table, aes(x = NMDS1, y = NMDS2)) + geom_point(aes(color = Category, size=1), position="jitter") +
labs(title = paste("NMDS stress = ", stress)) + theme_bw() +
scale_color_manual(values=myColor) +
geom_text_repel(max.overlaps = 50, label=NMDS_table$SampleID,size=3) +
theme(axis.text.x = element_blank(),axis.text.y = element_blank(),axis.ticks = element_blank()) +
theme(axis.line = element_line(color='black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) # these last 3 lines remove the grid lines
ggsave(filename=paste0(output,"with_names.svg"),plot=myplot)
suppressMessages(library("vegan"))
suppressMessages(library("dplyr"))
suppressMessages(library("tidyverse"))
suppressMessages(library("ggplot2"))
suppressMessages(library("ggrepel"))
suppressMessages(library("cowplot"))
PCoA = "~/Documents/bioinfo_snakemake/data/distance/PCoA/PCoA_kfp5s2_gs_LAPds+philr.tsv"
output = "~/Documents/bioinfo_snakemake/data/test.svg"
category = "condition"
mapping_file = "~/Documents/bioinfo_snakemake/data/map/kfp5s2_gs_LAPds.txt"
color = "condition_color"
ProportionsExplained = readLines(PCoA,n=5) %>% # read til the line that has the explained proportions
tail(.,n=1) %>% # get the last item in the file
strsplit(., "\t") %>% # get a list of each item
.[[1]] %>% .[c(1,2)] %>%
as.numeric(.)  # get items 1 and 2, which are the first 2 coordinates
ProportionsExplained = ProportionsExplained*100
coordinates = read_tsv(PCoA,skip=8,skip_empty_rows = TRUE) %>% head(.,n=-2) # read til the line that has the explained proportions
colnames(coordinates) = c("SampleID","PCoA1","PCoA2")
coordinates = as.data.frame(coordinates)
map = read.csv(mapping_file, skip=0, header=T, sep="\t")
View(coordinates)
coordinates = read_tsv(PCoA,skip=8,skip_empty_rows = TRUE) %>% head(.,n=-2) # read til the line that has the explained proportions
View(coordinates)
coordinates = read_tsv(PCoA,skip=9,skip_empty_rows = TRUE) %>% head(.,n=-2) # read til the line that has the explained proportions
coordinates = rbind(colnames(coordinates),coordinates)
coordinates = coordinates[ , c(1,2, 3)]
colnames(coordinates) = c("SampleID","PCoA1","PCoA2")
coordinates = as.data.frame(coordinates)
?wilcox.test
alpha = "~/Documents/bioinfo_snakemake/data/alpha_div/calc_kfp5s2_gs_GAPds_LAPds+shannon.txt"
group = "condition"
output = "~/Documents/bioinfo_snakemake/data/plots/patientlevel_alphaDiv_kfp5s2_gs_GAPds_LAPds/"
patientID = "SubjectID"
map =  "~/Documents/bioinfo_snakemake/data/map/kfp5s2_gs_GAPds_LAPds.txt"
map = suppressMessages(read_tsv(map))
alphaDivType = basename(alpha)
alphaDivType = strsplit(alphaDivType, ".txt") %>% .[[1]]
alphaDivType = strsplit(alphaDivType, "\\+")  %>% .[[1]] %>% .[2]
alpha = suppressMessages(read_tsv(alpha))
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppressPackageStartupMessages(suppressWarnings(library("optparse")))
suppressPackageStartupMessages(suppressWarnings(library(reshape2)))
map = suppressMessages(read_tsv(map))
alphaDivType = basename(alpha)
alphaDivType = strsplit(alphaDivType, ".txt") %>% .[[1]]
alphaDivType = strsplit(alphaDivType, "\\+")  %>% .[[1]] %>% .[2]
alpha = suppressMessages(read_tsv(alpha))
myNames = c("#SampleID","alpha")
colnames(alpha) = myNames
merged = merge(map,alpha) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
myNames = c("#SampleID","alpha")
colnames(alpha) = myNames
View(alpha)
map_first_column = colnames(map)
View(map)
map_first_column = colnames(map)[1]
map_first_column
?merge
merged = merge(map,alpha, by.x = map_first_column, by.y = "#SampleId")
myNames = c("SampleID","alpha")
colnames(alpha) = myNames
map_first_column = colnames(map)[1]
merged = merge(map,alpha, by.x = map_first_column, by.y = "SampleId")
merged = merge(map,alpha, by.x = colnames(map)[1], by.y = "SampleId")
merged = merge(as.data.frame(map),as.data.frame(alpha), by.x = colnames(map)[1], by.y = "SampleId")
View(alpha)
merged = merge(map,alpha, by.x = colnames(map)[1], by.y = "SampleID")
merged = merge(map,alpha, by.x = colnames(map)[1], by.y = "SampleID") %>% .[, c(myNames, group, patientID)]
View(merged)
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1])
group
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
c(myNames, group, patientID)
hi = c(myNames, group, patientID)
hi
patientID = "ssubjectID"
patientID = "subjectID"
merged = merge(alpha,map, by.x = "SampleID", by.y = colnames(map)[1]) %>% .[, c(myNames, group, patientID)]
colnames(merged)[3] = "group"
myCombos = unique(merged$group) %>% combn(.,2)
numOfComparisons = dim(myCombos)[2]
for (x in 1:numOfComparisons){
category1 = myCombos[,x][1]
category2 = myCombos[,x][2]
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
currenTable = rbind(category1Table,category2Table)
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1 %>% as.matrix(.)
category1reps = rep(category1,length(patientIDtwos))
category2reps = rep(category2,length(patientIDtwos))
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
numOfPatients = length(tablesMerged[,1])
myGraph = ggpubr::ggpaired(tablesMerged, cond1 = category1, cond2 = category2, fill = "condition", palette = "jco", line.size=0.01, title= (paste("Patient-level comparison of",alphaDivType,"between",category1,"&",category2)), subtitle = paste("n =",numOfPatients,"Wilcoxon signed rank sum test, P-value <",formatC(pvalue, format = "e", digits = 5)))
ggsave(filename=paste0(output,"/alpha_div_patientLevel_",alphaDivType,"_",category1,"_",category2,".svg"),plot=myGraph)
}
myCombos
numOfComparisons = dim(myCombos)[2]
numOfComparisons
x
category1 = myCombos[,x][1]
category1
category2 = myCombos[,x][2]
category2
category1Table = subset(as.data.frame(merged),group == category1)
category2Table = subset(as.data.frame(merged),group == category2)
category1Table
currenTable = rbind(category1Table,category2Table)
currentTable
currenTable
View(currenTable)
patientIDrepetitions = table(currenTable[paste(patientID)])
patientIDrepetitions
patientIDtwos = subset(as.data.frame(patientIDrepetitions),Freq == 2) %>% .$Var1 %>% as.matrix(.)
patientIDtwos
category1reps = rep(category1,length(patientIDtwos))
category1reps
table1 = cbind(patientIDtwos,category1reps)
colnames(table1) = c(patientID,"group")
table1merged = merge(table1,merged,by.all = TRUE)
table2 = cbind(patientIDtwos,category2reps)
colnames(table2) = c(patientID,"group")
table2merged = merge(table2,merged,by.all = TRUE)
tablesMerged = merge(table1merged,table2merged,by = patientID)
tablesMerged = cbind(tablesMerged$alpha.x,tablesMerged$alpha.y) %>% as.data.frame(.)
colnames(tablesMerged) = c(category1,category2)
View(tablesMerged)
pvalue = wilcox.test(tablesMerged[,1],tablesMerged[,2], paired = TRUE) %>% .$p.value
dim(tablesMerged)
dim(tablesMerged)[1]
#!/usr/local/bin/Rscript --vanilla
set.seed(1234)
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(library(optparse)))
suppressWarnings(suppressMessages(library(ggpubr)))
suppressWarnings(suppressMessages(library(ggplot2)))
cond = "condition"
dist_type = "bray"
patientID = "subjectID"
dist = "~/Documents/bioinfo_snakemake/data/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayCurtis_2.tsv"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
rownames(dist) = dist[,1]
dist = dist[, colnames(dist) != "X1"]
dist[upper.tri(dist)] = NA
dist = reshape2::melt(dist, na.rm = TRUE)
colnames(dist) = c("v1","v2",dist_type)
repl = "~/Documents/bioinfo_snakemake/data/data/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayRepl.tsv"
repl = suppressWarnings(suppressMessages(read_tsv(repl,progress = FALSE))) %>% as.matrix(.)
rownames(repl) = repl[,1]
repl = repl[, colnames(repl) != "X1"]
repl[upper.tri(repl)] = NA
repl = reshape2::melt(repl, na.rm = TRUE)
colnames(repl) = c("v1","v2","repl")
repl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayRepl.tsv"
repl = suppressWarnings(suppressMessages(read_tsv(repl,progress = FALSE))) %>% as.matrix(.)
rownames(repl) = repl[,1]
repl = repl[, colnames(repl) != "X1"]
repl[upper.tri(repl)] = NA
repl = reshape2::melt(repl, na.rm = TRUE)
colnames(repl) = c("v1","v2","repl")
noRepl = "~/Documents/bioinfo_snakemake/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayNoRepl.tsv"
repl = suppressWarnings(suppressMessages(read_tsv(repl,progress = FALSE))) %>% as.matrix(.)
rownames(repl) = repl[,1]
repl = repl[, colnames(repl) != "X1"]
repl[upper.tri(repl)] = NA
repl = reshape2::melt(repl, na.rm = TRUE)
colnames(repl) = c("v1","v2","repl")
repl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayRepl.tsv"
repl = suppressWarnings(suppressMessages(read_tsv(repl,progress = FALSE))) %>% as.matrix(.)
rownames(repl) = repl[,1]
repl = repl[, colnames(repl) != "X1"]
repl[upper.tri(repl)] = NA
repl = reshape2::melt(repl, na.rm = TRUE)
colnames(repl) = c("v1","v2","repl")
noRepl = "~/Documents/bioinfo_snakemake/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayNoRepl.tsv"
noRepl = suppressWarnings(suppressMessages(read_tsv(noRepl,progress = FALSE))) %>% as.matrix(.)
rownames(noRepl) = noRepl[,1]
noRepl = noRepl[, colnames(noRepl) != "X1"]
noRepl[upper.tri(noRepl)] = NA
noRepl = reshape2::melt(noRepl, na.rm = TRUE)
colnames(noRepl) = c("v1","v2","noRepl")
noRepl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/kfp5s2_gs_GAPds_LAPds+BrayNoRepl.tsv"
noRepl = suppressWarnings(suppressMessages(read_tsv(noRepl,progress = FALSE))) %>% as.matrix(.)
rownames(noRepl) = noRepl[,1]
noRepl = noRepl[, colnames(noRepl) != "X1"]
noRepl[upper.tri(noRepl)] = NA
noRepl = reshape2::melt(noRepl, na.rm = TRUE)
colnames(noRepl) = c("v1","v2","noRepl")
map = "~/Documents/bioinfo_snakemake/data/map/kfp5s2_gs_GAPds_LAPds.txt"
map = suppressMessages(read_tsv(map))
output = "~/Documents/bioinfo_snakemake/data/plots/patientlevel_betapart_bray_kfp5s2_gs_GAPds_LAPds/"
distance = merge(dist,repl, all = TRUE) %>% merge(.,noRepl, all = TRUE)
sampleIDs = map[,1]
patientIDcolumn = which(colnames(map) == patientID)
patientIDcolumn = map[,patientIDcolumn]
sampleIDtable = cbind(sampleIDs,patientIDcolumn)
myConds = which(colnames(map) == cond) %>% map[,.] %>% as.matrix(.)
myUniqueConds = myConds %>% unique(.)
reducedMap = cbind(sampleIDs,myConds)
colnames(reducedMap) = cbind("v1","cond1")
distance = merge(distance, reducedMap, by.x=c("v1"), by.y=c("v1")) %>% merge(., reducedMap, by.x=c("v2"), by.y=c("v1"))
colnames(sampleIDtable) = c("v1","v1subjectID")
distance = merge(distance,sampleIDtable, by.x=c("v1"), by.y=c("v1"))
colnames(sampleIDtable) = c("v2","v2subjectID")
distance = merge(distance,sampleIDtable, by.x=c("v2"), by.y=c("v2"))
# Subset to only those from the same patient
distance = distance[distance$v1subjectID==distance$v2subjectID, ]
colnames(distance) = c("v2","v1",dist_type,"repl","noRepl","cond1","cond2","v1subjectID","v2subjectID")
View(distance)
myCombos = combn(myUniqueConds,2) %>% t(.) # Get all 2 way combinations of your variables
uniqueCond1 = myCombos[,1] %>% unique(.) # Get the first column, then iterate over myCombos
myCombos
unique(distance$cond1,distance$cond2)
uniqueCond1
myCond1[1]
myCond1[1,]
myCond1=uniqueCond1[1]
myCond1
table1 = subset(distance,cond1 == myCond1)
table1 = data.frame(table1$v1,table1$v2,table1[,3],table1$repl,table1$noRepl,table1$cond1,table1$cond2) # Rearrange the columns
colnames(table1) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names of the columns
table2 = subset(distance,cond2 == myCond1)
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond2","cond1") # This makes table2 to have the same format as table1
table2 = data.frame(table2$v1,table2$v2,table2[,3],table2$repl,table2$noRepl,table2$cond1,table2$cond2) # Rearrange the columns
colnames(table2) = c("v1","v2",dist_type,"repl","noRepl","cond1","cond2") # Fix the names
myTable = rbind(table1,table2)
View(myTable)
i = c(3,4,5)
myTable[,i] = apply(myTable[,i],2, function(x) as.numeric(as.character(x)))
rm(table1,table2)
cond2s = subset(as.data.frame(myCombos),V1 == myCond1) %>% .[,2]
cond2s
myCond2 = cond2s[2]
myCond2
v1v2_tables = subset(myTable,cond2 == as.character(myCond2))
dim(v1v2_tables)[1,]
dim(v1v2_tables)[1]
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(library(optparse)))
suppressWarnings(suppressMessages(library(ggpubr)))
suppressWarnings(suppressMessages(library(ggplot2)))
cond = "condition"
dist_type = "bray"
patientID = "subjectID"
dist = "data/distance/beta_div/16s_species_LAPds_GAPds+BrayCurtis_2.tsv"
setwd = "~/Documents/bioinfo_snakemake/"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
rownames(dist) = dist[,1]
dist = dist[, colnames(dist) != "X1"]
dist[upper.tri(dist)] = NA
dist = reshape2::melt(dist, na.rm = TRUE)
colnames(dist) = c("v1","v2",dist_type)
setwd = "~/Documents/bioinfo_snakemake/"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
dist = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds_GAPds+BrayCurtis_2.tsv"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
rownames(dist) = dist[,1]
dist = dist[, colnames(dist) != "X1"]
dist[upper.tri(dist)] = NA
dist = reshape2::melt(dist, na.rm = TRUE)
colnames(dist) = c("v1","v2",dist_type)
repl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds_GAPds+BrayRepl.tsv"
repl = suppressWarnings(suppressMessages(read_tsv(repl,progress = FALSE))) %>% as.matrix(.)
rownames(repl) = repl[,1]
repl = repl[, colnames(repl) != "X1"]
repl[upper.tri(repl)] = NA
repl = reshape2::melt(repl, na.rm = TRUE)
colnames(repl) = c("v1","v2","repl")
noRepl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds_GAPds+BrayNoRepl.tsv"
noRepl = suppressWarnings(suppressMessages(read_tsv(noRepl,progress = FALSE))) %>% as.matrix(.)
rownames(noRepl) = noRepl[,1]
noRepl = noRepl[, colnames(noRepl) != "X1"]
noRepl[upper.tri(noRepl)] = NA
noRepl = reshape2::melt(noRepl, na.rm = TRUE)
colnames(noRepl) = c("v1","v2","noRepl")
map = "~/Documents/bioinfo_snakemake/data/map/16s_species_LAPds_GAPds.txt"
map = suppressMessages(read_tsv(map))
output = "~/Documents/bioinfo_snakemake/data/"
distance = merge(dist,repl, all = TRUE) %>% merge(.,noRepl, all = TRUE)
sampleIDs = map[,1]
patientIDcolumn = which(colnames(map) == patientID)
patientIDcolumn = map[,patientIDcolumn]
sampleIDtable = cbind(sampleIDs,patientIDcolumn)
myConds = which(colnames(map) == cond) %>% map[,.] %>% as.matrix(.)
myUniqueConds = myConds %>% unique(.)
reducedMap = cbind(sampleIDs,myConds)
colnames(reducedMap) = cbind("v1","cond1")
distance = merge(distance, reducedMap, by.x=c("v1"), by.y=c("v1")) %>% merge(., reducedMap, by.x=c("v2"), by.y=c("v1"))
colnames(sampleIDtable) = c("v1","v1subjectID")
distance = merge(distance,sampleIDtable, by.x=c("v1"), by.y=c("v1"))
colnames(sampleIDtable) = c("v2","v2subjectID")
distance = merge(distance,sampleIDtable, by.x=c("v2"), by.y=c("v2"))
# Subset to only those from the same patient
distance = distance[distance$v1subjectID==distance$v2subjectID, ]
colnames(distance) = c("v2","v1",dist_type,"repl","noRepl","cond1","cond2","v1subjectID","v2subjectID")
uniqueCond1 = distance$cond1 %>% unique(.)
distance = merge(distance, reducedMap, by.x=c("v1"), by.y=c("v1")) %>% merge(., reducedMap, by.x=c("v2"), by.y=c("v1"))
distance = merge(dist,repl, all = TRUE) %>% merge(.,noRepl, all = TRUE)
sampleIDs = map[,1]
patientIDcolumn = which(colnames(map) == patientID)
patientIDcolumn = map[,patientIDcolumn]
sampleIDtable = cbind(sampleIDs,patientIDcolumn)
myConds = which(colnames(map) == cond) %>% map[,.] %>% as.matrix(.)
myUniqueConds = myConds %>% unique(.)
reducedMap = cbind(sampleIDs,myConds)
colnames(reducedMap) = cbind("v1","cond1")
View(reducedMap)
View(distance)
View(dist)
distance = merge(dist,repl, all = TRUE) %>% merge(.,noRepl, all = TRUE)
dist = "data/distance/beta_div/16s_species_LAPds_GAPds+BrayCurtis_2.tsv"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
rownames(dist) = dist[,1]
dist = dist[, colnames(dist) != "X1"]
dist[upper.tri(dist)] = NA
dist = reshape2::melt(dist, na.rm = TRUE)
colnames(dist) = c("v1","v2",dist_type)
dist = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds_GAPds+BrayCurtis_2.tsv"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
rownames(dist) = dist[,1]
dist = dist[, colnames(dist) != "X1"]
dist[upper.tri(dist)] = NA
dist = reshape2::melt(dist, na.rm = TRUE)
colnames(dist) = c("v1","v2",dist_type)
distance = merge(dist,repl, all = TRUE) %>% merge(.,noRepl, all = TRUE)
View(distance)
View(dist)
#!/usr/local/bin/Rscript --vanilla
set.seed(1234)
suppressWarnings(suppressMessages(library(devtools)))
suppressWarnings(suppressMessages(load_all(path = "workflow/scripts/betapart")))
#install.packages("workflow/scripts/betapart_1.5.4.tar.gz", repos = NULL, type ="source")
#library("betapart")
suppressWarnings(suppressMessages(library(optparse)))
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(require(vegan)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(phyloseq)))
biomFile = "~/Documents/bioinfo_snakemake/data/tsv/16s_species_LAPds_GAPds.tsv"
myTable = read_tsv(biomFile, skip = 1) %>% as.data.frame(.)
View(myTable)
breakdown = function(biomMatrix,distance){
biomMatrix = biomMatrix %>% t() %>% as.matrix()
if (distance == "bray"){
breakdown = beta.pair.abund(biomMatrix, index.family="bray")
replacement   = breakdown$beta.bray.bal %>% as.matrix() %>% as.data.frame()
noReplacement = breakdown$beta.bray.gra %>% as.matrix %>% as.data.frame()
fullDistance  = breakdown$beta.bray %>% as.matrix %>% as.data.frame()
} else if (distance == "jaccard"){
breakdown = beta.pair(vegan::decostand(x=biomMatrix, method="pa"), index.family="jaccard") #decostand changes abundance to presence/absence
replacement   = breakdown$beta.jtu %>% as.matrix() %>% as.data.frame()
noReplacement = breakdown$beta.jne %>% as.matrix %>% as.data.frame()
fullDistance  = breakdown$beta.jac %>% as.matrix %>% as.data.frame()
}
myDists = list(fullDistance,replacement,noReplacement)
return(myDists)
}
distance = "bray"
myDists = breakdown(myTable,distance)
library(betapart)
myDists = breakdown(myTable,distance)
View(MyDists[[1]])
View(myDists[[1]])
View(myTable)
View(myTable)
?read_tsv
myTable[,1]
rownames(myTable) = myTable[,1]
myTable[,1] = NULL
myDists = breakdown(myTable,distance)
View(myDists[[1]])
set.seed(1234)
suppressWarnings(suppressMessages(library(optparse)))
suppressWarnings(suppressMessages(require(tidyverse)))
suppressWarnings(suppressMessages(require(vegan)))
suppressWarnings(suppressMessages(library(dplyr)))
suppressWarnings(suppressMessages(library(phyloseq)))
biomFile = "~/Documents/bioinfo_snakemake/data/biom/kfp5s2_gs_GAPds_LAPds_rarefied.biom"
mappingFile = "~/Documents/bioinfo_snakemake/data/map/kfp5s2_gs_GAPds_LAPds_rarefied.txt"
condition = "condition"
output = "~/Documents/bioinfo_snakemake/data/"
load_phylo = function(myPhyloseqObject){
# Load and format tables
myBiomTSV = myPhyloseqObject@otu_table@.Data
featureNames = row.names(myBiomTSV) %>% as.matrix()
myBiomTSV = as.data.frame(myBiomTSV)
row.names(myBiomTSV) = featureNames
myBiomTSV = myBiomTSV[-c(1)] %>% t(.) %>% as.data.frame(.)
return(myBiomTSV)
}
biom = suppressWarnings(suppressMessages(import_biom(biomFile)))
biomFile
biomFile = "~/Documents/bioinfo_snakemake/data/biom/kfp5s2_gs_GAPds_LAPds_rarefied.tsv"
otu.table = otu_table(biomFile, taxa_are_rows = FALSE)
?otu_table
phyloseq::read_csv2phyloseq()
??read_csv2phyloseq()
?read_tsv
biom = read_tsv(biomFile,skip=1)
biom = read_tsv(biomFile,skip=1)
View(biom)
biom = read_tsv(biomFile,skip=1) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
biom = otu_table(biom, taxa_are_rows = FALSE)
biom = read_tsv(biomFile,skip=1) %>% as.data.frame(.)
rownames(biom) = biom[,1]
biom[,1] = NULL
View(biom)
biom = otu_table(biom, taxa_are_rows = TRUE)
mapping = import_qiime_sample_data(mappingFile)
condNum = which(colnames(mapping)==condition)
condName = mapping[,condNum][[1]] %>% unique(.) %>% as.character(.)
myPhylo = merge_phyloseq(biom,mapping)
myCondPop = c()
for (myCond in condName) {
subsetPhylo = subset_samples(myPhylo, myPhylo@sam_data@.Data[[condNum]]==myCond)
subsetTable = suppressWarnings(suppressMessages(load_phylo(subsetPhylo)))
write.table(subsetTable,file=paste0(output,"/",condition,"+",myCond,".tsv"), quote = FALSE, sep = "\t",col.names = NA)
}
dist_type = "jaccard"
cond = "condition"
patientID = "subjectID"
dist = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds+jaccard_2.tsv"
dist = suppressWarnings(suppressMessages(read_tsv(dist,progress = FALSE))) %>% as.matrix(.)
rownames(dist) = dist[,1]
dist = dist[, colnames(dist) != "X1"]
dist[upper.tri(dist)] = NA
dist = reshape2::melt(dist, na.rm = TRUE)
colnames(dist) = c("v1","v2",dist_type)
repl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds+jaccardRepl.tsv"
repl = suppressWarnings(suppressMessages(read_tsv(repl,progress = FALSE))) %>% as.matrix(.)
rownames(repl) = repl[,1]
repl = repl[, colnames(repl) != "X1"]
repl[upper.tri(repl)] = NA
repl = reshape2::melt(repl, na.rm = TRUE)
colnames(repl) = c("v1","v2","repl")
noRepl = "~/Documents/bioinfo_snakemake/data/distance/beta_div/16s_species_LAPds+jaccardNoRepl.tsv"
noRepl = suppressWarnings(suppressMessages(read_tsv(noRepl,progress = FALSE))) %>% as.matrix(.)
rownames(noRepl) = noRepl[,1]
noRepl = noRepl[, colnames(noRepl) != "X1"]
noRepl[upper.tri(noRepl)] = NA
noRepl = reshape2::melt(noRepl, na.rm = TRUE)
colnames(noRepl) = c("v1","v2","noRepl")
map = "~/Documents/bioinfo_snakemake/data/map/16s_species_LAPds_GAPds.txt"
map = "~/Documents/bioinfo_snakemake/data/map/16s_species_LAPds.txt"
map = suppressMessages(read_tsv(map))
output = "~/Documents/bioinfo_snakemake/data/"
distance = merge(dist,repl, all = TRUE) %>% merge(.,noRepl, all = TRUE)
sampleIDs = map[,1]
patientIDcolumn = which(colnames(map) == patientID)
patientIDcolumn = map[,patientIDcolumn]
sampleIDtable = cbind(sampleIDs,patientIDcolumn)
myConds = which(colnames(map) == cond) %>% map[,.] %>% as.matrix(.)
myUniqueConds = myConds %>% unique(.)
reducedMap = cbind(sampleIDs,myConds)
colnames(reducedMap) = cbind("v1","cond1")
distance = merge(distance, reducedMap, by.x=c("v1"), by.y=c("v1")) %>% merge(., reducedMap, by.x=c("v2"), by.y=c("v1"))
colnames(sampleIDtable) = c("v1","v1subjectID")
distance = merge(distance,sampleIDtable, by.x=c("v1"), by.y=c("v1"))
colnames(sampleIDtable) = c("v2","v2subjectID")
distance = merge(distance,sampleIDtable, by.x=c("v2"), by.y=c("v2"))
View(distance)
View(sampleIDtable)
sampleIDs = map[,1]
patientIDcolumn = which(colnames(map) == patientID)
patientIDcolumn = map[,patientIDcolumn]
sampleIDtable = cbind(sampleIDs,patientIDcolumn)
View(map)
?read.tsv
??read.tsv
?read.delim
